{"version":3,"sources":["app/components/Terminal/styles.ts","app/components/TerminalHeader/styles.ts","app/components/TerminalHeader/index.tsx","app/components/TerminalIntro/styles.ts","app/components/Highlight.ts","app/components/TerminalIntro/index.tsx","app/components/TerminalPrompt/styles.ts","app/components/TerminalPrompt/index.tsx","app/components/Terminal/index.tsx","app/GlobalStyle.ts","app/App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["Wrapper","styled","div","Content","header","AsciiArt","Line","PortfolioAsciiArt","TerminalAsciiArt","TerminalHeader","map","line","p","Hightlight","span","bold","TerminalIntro","Label","Prompt","Caret","TerminalPrompt","text","Terminal","useState","document","addEventListener","event","console","log","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"qNAEaA,EAAUC,IAAOC,IAAV,kJASPC,EAAUF,IAAOC,IAAV,oMCTPF,EAAUC,IAAOG,OAAV,uMAYPC,EAAWJ,IAAOC,IAAV,wJAURI,EAAOL,IAAOC,IAAV,8I,OCrBXK,EAAoB,CACxB,4DACA,+DACA,kEACA,6DACA,gEAGIC,EAAmB,CACvB,yDACA,0DACA,+DACA,8DACA,0DACA,8DAkBaC,EAfkB,kBAC/B,eAAC,EAAD,WACE,cAACJ,EAAD,UACGE,EAAkBG,KAAI,SAAAC,GAAI,OACzB,cAACL,EAAD,UAAkBK,GAAPA,QAGf,cAACN,EAAD,UACGG,EAAiBE,KAAI,SAAAC,GAAI,OACxB,cAACL,EAAD,UAAkBK,GAAPA,YC3BNX,EAAUC,IAAOW,EAAV,0JCIPC,EAAaZ,IAAOa,KAAV,kKAEN,qBAAGC,KAAkB,OAAS,YCKhCC,EATiB,kBAC9B,eAAC,EAAD,gCACoB,cAACH,EAAD,CAAYE,MAAI,EAAhB,0CADpB,IAC4E,uBAD5E,iDAEgD,uBAFhD,sEAGqE,uBACnE,cAACF,EAAD,mBAJF,6BAIyD,cAACA,EAAD,mBAJzD,kDCHWI,EAAQhB,IAAOa,KAAV,2JASLI,EAASjB,IAAOa,KAAV,qJASNK,EAAQlB,IAAOa,KAAV,8LCFHM,EAVyB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACtC,gCACE,eAACJ,EAAD,WACE,gDAAsB,cAACJ,EAAD,oBAExB,cAACK,EAAD,UAASG,IACT,cAACF,EAAD,QCuBWG,EA/BY,WACzB,MAAwBC,mBAAS,IAAjC,mBAAOF,EAAP,KACA,GADA,KAC0CE,mBAAS,IAAnD,6BAkBA,OAJAC,SAASC,iBAAiB,SAZN,SAACC,GACnBC,QAAQC,IAAI,QAASF,MAYvBF,SAASC,iBAAiB,WATJ,SAACC,GACrBC,QAAQC,IAAI,UAAWF,MASzBF,SAASC,iBAAiB,YANH,SAACC,GACtBC,QAAQC,IAAI,WAAYF,MAQxB,cAAC1B,EAAD,UACE,eAACG,EAAD,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,CAAgBkB,KAAMA,UC7BjBQ,EAAcC,YAAH,0VCWTC,EATgB,WAC7B,OACE,qCACE,cAACF,EAAD,IACA,cAAC,EAAD,QCMSG,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAACkB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN7B,QAAQ6B,MAAMA,EAAMC,YCpH5BzB,M","file":"static/js/main.431cba3a.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background-color: var(--backgroundColor);\n`;\n\nexport const Content = styled.div`\n  margin: auto;\n  color: var(--green);\n  font-family: var(--font);\n  max-width: var(--maxWidth);\n  padding-left: var(--marginX);\n  padding-right: var(--marginX);\n`;","import styled from 'styled-components';\n\nexport const Wrapper = styled.header`\n  white-space: pre;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: var(--marginTop);\n  font-size: 8px;\n\n  @media (min-width: 600px) {\n    font-size: 14px;\n  }\n`;\n\nexport const AsciiArt = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n\n  @media (min-width: 600px) {\n    width: fit-content;\n  }\n`;\n\nexport const Line = styled.div`\n  width: fit-content;\n\n  ::selection {\n    color: var(--backgroundColor);\n    background: var(--green);\n  }\n`;","import React from 'react';\nimport { Wrapper, AsciiArt, Line } from './styles';\n\nconst PortfolioAsciiArt = [\n  '__________              __    _____      .__  .__        ',\n  '\\\\______   \\\\____________/  |__/ ____\\\\____ |  | |__| ____  ',\n  ' |     ___/  _ \\\\_  __ \\\\   __\\\\   __\\\\/  _ \\\\|  | |  |/  _ \\\\ ',\n  ' |    |  (  <_> )  | \\\\/|  |  |  | (  <_> )  |_|  (  <_> )',\n  ' |____|   \\\\____/|__|   |__|  |__|  \\\\____/|____/__|\\\\____/ ',\n];\n\nconst TerminalAsciiArt = [\n  '  ___________                  .__              .__   ',\n  '  \\\\__    ___/__________  _____ |__| ____ _____  |  |  ',\n  '    |    |_/ __ \\\\_  __ \\\\/     \\\\|  |/    \\\\\\\\__  \\\\ |  |  ',\n  '    |    |\\\\  ___/|  | \\\\/  Y Y  \\\\  |   |  \\\\/ __ \\\\|  |__',\n  '    |____| \\\\___  >__|  |__|_|  /__|___|  (____  /____/',\n  '               \\\\/            \\\\/        \\\\/     \\\\/      '\n];\n\nconst TerminalHeader: React.FC = () => (\n  <Wrapper>\n    <AsciiArt>\n      {PortfolioAsciiArt.map(line => (\n        <Line key={line}>{line}</Line>\n      ))}\n    </AsciiArt>\n    <AsciiArt>\n      {TerminalAsciiArt.map(line => (\n        <Line key={line}>{line}</Line>\n      ))}\n    </AsciiArt>\n  </Wrapper>\n);\n\nexport default TerminalHeader;","import styled from \"styled-components\";\n\nexport const Wrapper = styled.p`\n  line-height: var(--lineHeight);\n\n  ::selection {\n    color: var(--backgroundColor);\n    background: var(--green);\n  }\n`;","import styled from \"styled-components\";\n\ntype Props = {\n  bold?: boolean;\n};\n\nexport const Hightlight = styled.span<Props>`\n  color: var(--cyan);\n  font-weight: ${({ bold }) => bold ? 'bold' : 'normal' };\n\n  ::selection {\n    color: var(--backgroundColor);\n    background: var(--cyan);\n  }\n`;","import React from 'react';\nimport { Wrapper } from './styles';\nimport { Hightlight } from '../Highlight';\n\nconst TerminalIntro: React.FC = () => (\n  <Wrapper>\n    Hello, my name is <Hightlight bold>Jos√© Ignacio Cruz Moreira</Hightlight>.<br />\n    I am a Full-Stack Software Engineer from Cuba.<br />\n    If you want to know more about me, feel free to type some commands.<br />\n    <Hightlight>Hint</Hightlight>: you can start by typing <Hightlight>help</Hightlight> to see the list of all available commands.\n  </Wrapper>\n);\n\nexport default TerminalIntro;","import styled from 'styled-components';\n\nexport const Label = styled.span`\n  margin-right: 5px;\n\n  ::selection, b::selection {\n    color: var(--backgroundColor);\n    background: var(--green);\n  }\n`;\n\nexport const Prompt = styled.span`\n  overflow-wrap: break-word;\n\n  ::selection {\n    color: var(--backgroundColor);\n    background: var(--green);\n  }\n`;\n\nexport const Caret = styled.span`\n  border-left: 1ch solid var(--green);\n  animation: blink 1s steps(5, start) infinite;\n\n  @keyframes blink {\n    to {\n      visibility: hidden;\n    }\n  }\n`;","import React from 'react'\nimport { Hightlight } from '../Highlight';\nimport { Caret, Label, Prompt } from './styles';\n\ntype Props = {\n  text: string;\n}\n\nconst TerminalPrompt: React.FC<Props> = ({ text }) => (\n  <div>\n    <Label>\n      <b>root@portfolio:</b><Hightlight>~$</Hightlight>\n    </Label>\n    <Prompt>{text}</Prompt>\n    <Caret></Caret>\n  </div>\n);;\n\nexport default TerminalPrompt;","import React, { useState } from 'react'\nimport { Wrapper, Content } from './styles';\nimport TerminalHeader from '../TerminalHeader';\nimport TerminalIntro from '../TerminalIntro';\nimport TerminalPrompt from '../TerminalPrompt';\n\nconst Terminal: React.FC = () => {\n  const [text, setText] = useState('');\n  const [caretPosition, setCaretPosition] = useState(0);\n  \n  const handleKeyUp = (event: KeyboardEvent) => {\n    console.log('keyup', event);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent) => {\n    console.log('keydown', event);\n  };\n  \n  const handleKeyPress = (event: KeyboardEvent) => {\n    console.log('keypress', event);\n  };\n\n  document.addEventListener('keyup', handleKeyUp);\n  document.addEventListener('keydown', handleKeyDown);\n  document.addEventListener('keypress', handleKeyPress);\n\n  return (\n    <Wrapper>\n      <Content>\n        <TerminalHeader />\n        <TerminalIntro />\n        <TerminalPrompt text={text} />\n      </Content>\n    </Wrapper>\n  );\n};\n\nexport default Terminal;","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --marginX: 15px;\n    --fontSize: 16px;\n    --marginTop: 15px;\n    --cyan: #3a96ddff;\n    --green: #16c60cff;\n    --maxWidth: 1210px;\n    --lineHeight: 20px;\n    --backgroundColor: black;\n    --font: Consolas, monospace;\n\n    @media (min-width: 1250px) {\n      --marginTop: 80px;\n    }\n  }\n`;\n","import { FunctionComponent } from 'react';\nimport Terminal from './components/Terminal';\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App: FunctionComponent = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <Terminal />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}